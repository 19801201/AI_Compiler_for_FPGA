fn (%input: Tensor[(1, 1, 640, 640), float32], %conv1.conv.0.weight: Tensor[(32, 1, 3, 3), float32], %conv1.conv.0.bias: Tensor[(32), float32], %conv1.conv.1.weight: Tensor[(32), float32], %conv1.conv.1.bias: Tensor[(32), float32], %conv1.conv.1.running_mean: Tensor[(32), float32], %conv1.conv.1.running_var: Tensor[(32), float32], %conv2.conv.0.weight: Tensor[(64, 32, 3, 3), float32], %conv2.conv.0.bias: Tensor[(64), float32], %conv2.conv.1.weight: Tensor[(64), float32], %conv2.conv.1.bias: Tensor[(64), float32], %conv2.conv.1.running_mean: Tensor[(64), float32], %conv2.conv.1.running_var: Tensor[(64), float32], %resblock_body1.conv1.conv.0.weight: Tensor[(64, 64, 3, 3), float32], %resblock_body1.conv1.conv.0.bias: Tensor[(64), float32], %resblock_body1.conv1.conv.1.weight: Tensor[(64), float32], %resblock_body1.conv1.conv.1.bias: Tensor[(64), float32], %resblock_body1.conv1.conv.1.running_mean: Tensor[(64), float32], %resblock_body1.conv1.conv.1.running_var: Tensor[(64), float32], %resblock_body1.conv2.conv.0.weight: Tensor[(64, 64, 3, 3), float32], %resblock_body1.conv2.conv.0.bias: Tensor[(64), float32], %resblock_body1.conv2.conv.1.weight: Tensor[(64), float32], %resblock_body1.conv2.conv.1.bias: Tensor[(64), float32], %resblock_body1.conv2.conv.1.running_mean: Tensor[(64), float32], %resblock_body1.conv2.conv.1.running_var: Tensor[(64), float32], %resblock_body1.conv3.conv.0.weight: Tensor[(64, 64, 3, 3), float32], %resblock_body1.conv3.conv.0.bias: Tensor[(64), float32], %resblock_body1.conv3.conv.1.weight: Tensor[(64), float32], %resblock_body1.conv3.conv.1.bias: Tensor[(64), float32], %resblock_body1.conv3.conv.1.running_mean: Tensor[(64), float32], %resblock_body1.conv3.conv.1.running_var: Tensor[(64), float32], %resblock_body1.conv4.conv.0.weight: Tensor[(128, 128, 1, 1), float32], %resblock_body1.conv4.conv.0.bias: Tensor[(128), float32], %resblock_body1.conv4.conv.1.weight: Tensor[(128), float32], %resblock_body1.conv4.conv.1.bias: Tensor[(128), float32], %resblock_body1.conv4.conv.1.running_mean: Tensor[(128), float32], %resblock_body1.conv4.conv.1.running_var: Tensor[(128), float32], %resblock_body2.conv1.conv.0.weight: Tensor[(128, 128, 3, 3), float32], %resblock_body2.conv1.conv.0.bias: Tensor[(128), float32], %resblock_body2.conv1.conv.1.weight: Tensor[(128), float32], %resblock_body2.conv1.conv.1.bias: Tensor[(128), float32], %resblock_body2.conv1.conv.1.running_mean: Tensor[(128), float32], %resblock_body2.conv1.conv.1.running_var: Tensor[(128), float32], %resblock_body2.conv2.conv.0.weight: Tensor[(128, 128, 3, 3), float32], %resblock_body2.conv2.conv.0.bias: Tensor[(128), float32], %resblock_body2.conv2.conv.1.weight: Tensor[(128), float32], %resblock_body2.conv2.conv.1.bias: Tensor[(128), float32], %resblock_body2.conv2.conv.1.running_mean: Tensor[(128), float32], %resblock_body2.conv2.conv.1.running_var: Tensor[(128), float32], %resblock_body2.conv3.conv.0.weight: Tensor[(128, 128, 3, 3), float32], %resblock_body2.conv3.conv.0.bias: Tensor[(128), float32], %resblock_body2.conv3.conv.1.weight: Tensor[(128), float32], %resblock_body2.conv3.conv.1.bias: Tensor[(128), float32], %resblock_body2.conv3.conv.1.running_mean: Tensor[(128), float32], %resblock_body2.conv3.conv.1.running_var: Tensor[(128), float32], %resblock_body2.conv4.conv.0.weight: Tensor[(256, 256, 1, 1), float32], %resblock_body2.conv4.conv.0.bias: Tensor[(256), float32], %resblock_body2.conv4.conv.1.weight: Tensor[(256), float32], %resblock_body2.conv4.conv.1.bias: Tensor[(256), float32], %resblock_body2.conv4.conv.1.running_mean: Tensor[(256), float32], %resblock_body2.conv4.conv.1.running_var: Tensor[(256), float32], %resblock_body3.conv1.conv.0.weight: Tensor[(256, 256, 3, 3), float32], %resblock_body3.conv1.conv.0.bias: Tensor[(256), float32], %resblock_body3.conv1.conv.1.weight: Tensor[(256), float32], %resblock_body3.conv1.conv.1.bias: Tensor[(256), float32], %resblock_body3.conv1.conv.1.running_mean: Tensor[(256), float32], %resblock_body3.conv1.conv.1.running_var: Tensor[(256), float32], %resblock_body3.conv2.conv.0.weight: Tensor[(256, 256, 3, 3), float32], %resblock_body3.conv2.conv.0.bias: Tensor[(256), float32], %resblock_body3.conv2.conv.1.weight: Tensor[(256), float32], %resblock_body3.conv2.conv.1.bias: Tensor[(256), float32], %resblock_body3.conv2.conv.1.running_mean: Tensor[(256), float32], %resblock_body3.conv2.conv.1.running_var: Tensor[(256), float32], %resblock_body3.conv3.conv.0.weight: Tensor[(256, 256, 3, 3), float32], %resblock_body3.conv3.conv.0.bias: Tensor[(256), float32], %resblock_body3.conv3.conv.1.weight: Tensor[(256), float32], %resblock_body3.conv3.conv.1.bias: Tensor[(256), float32], %resblock_body3.conv3.conv.1.running_mean: Tensor[(256), float32], %resblock_body3.conv3.conv.1.running_var: Tensor[(256), float32], %resblock_body3.conv4.conv.0.weight: Tensor[(512, 512, 1, 1), float32], %resblock_body3.conv4.conv.0.bias: Tensor[(512), float32], %resblock_body3.conv4.conv.1.weight: Tensor[(512), float32], %resblock_body3.conv4.conv.1.bias: Tensor[(512), float32], %resblock_body3.conv4.conv.1.running_mean: Tensor[(512), float32], %resblock_body3.conv4.conv.1.running_var: Tensor[(512), float32], %resblock_body3.conv5.conv.0.weight: Tensor[(256, 256, 1, 1), float32], %resblock_body3.conv5.conv.0.bias: Tensor[(256), float32], %resblock_body3.conv5.conv.1.weight: Tensor[(256), float32], %resblock_body3.conv5.conv.1.bias: Tensor[(256), float32], %resblock_body3.conv5.conv.1.running_mean: Tensor[(256), float32], %resblock_body3.conv5.conv.1.running_var: Tensor[(256), float32], %conv3.conv.0.weight: Tensor[(512, 512, 3, 3), float32], %conv3.conv.0.bias: Tensor[(512), float32], %conv3.conv.1.weight: Tensor[(512), float32], %conv3.conv.1.bias: Tensor[(512), float32], %conv3.conv.1.running_mean: Tensor[(512), float32], %conv3.conv.1.running_var: Tensor[(512), float32], %conv_for_P5.conv.0.weight: Tensor[(256, 512, 1, 1), float32], %conv_for_P5.conv.0.bias: Tensor[(256), float32], %conv_for_P5.conv.1.weight: Tensor[(256), float32], %conv_for_P5.conv.1.bias: Tensor[(256), float32], %conv_for_P5.conv.1.running_mean: Tensor[(256), float32], %conv_for_P5.conv.1.running_var: Tensor[(256), float32], %yolo_headP5.yolo_head.0.conv.0.weight: Tensor[(512, 256, 3, 3), float32], %yolo_headP5.yolo_head.0.conv.0.bias: Tensor[(512), float32], %yolo_headP5.yolo_head.0.conv.1.weight: Tensor[(512), float32], %yolo_headP5.yolo_head.0.conv.1.bias: Tensor[(512), float32], %yolo_headP5.yolo_head.0.conv.1.running_mean: Tensor[(512), float32], %yolo_headP5.yolo_head.0.conv.1.running_var: Tensor[(512), float32], %yolo_headP5.yolo_head.1.weight: Tensor[(18, 512, 1, 1), float32], %yolo_headP5.yolo_head.1.bias: Tensor[(18), float32], %upsample.upsample.0.conv.0.weight: Tensor[(128, 256, 1, 1), float32], %upsample.upsample.0.conv.0.bias: Tensor[(128), float32], %upsample.upsample.0.conv.1.weight: Tensor[(128), float32], %upsample.upsample.0.conv.1.bias: Tensor[(128), float32], %upsample.upsample.0.conv.1.running_mean: Tensor[(128), float32], %upsample.upsample.0.conv.1.running_var: Tensor[(128), float32], %yolo_headP4.yolo_head.0.conv.0.weight: Tensor[(256, 384, 3, 3), float32], %yolo_headP4.yolo_head.0.conv.0.bias: Tensor[(256), float32], %yolo_headP4.yolo_head.0.conv.1.weight: Tensor[(256), float32], %yolo_headP4.yolo_head.0.conv.1.bias: Tensor[(256), float32], %yolo_headP4.yolo_head.0.conv.1.running_mean: Tensor[(256), float32], %yolo_headP4.yolo_head.0.conv.1.running_var: Tensor[(256), float32], %yolo_headP4.yolo_head.1.weight: Tensor[(18, 256, 1, 1), float32], %yolo_headP4.yolo_head.1.bias: Tensor[(18), float32]) {
  %0 = nn.conv2d(%input, %conv1.conv.0.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]);
  %1 = nn.bias_add(%0, %conv1.conv.0.bias);
  %2 = nn.batch_norm(%1, %conv1.conv.1.weight, %conv1.conv.1.bias, %conv1.conv.1.running_mean, %conv1.conv.1.running_var);
  %3 = %2.0;
  %4 = nn.leaky_relu(%3, alpha=0.125f);
  %5 = nn.conv2d(%4, %conv2.conv.0.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %6 = nn.bias_add(%5, %conv2.conv.0.bias);
  %7 = nn.batch_norm(%6, %conv2.conv.1.weight, %conv2.conv.1.bias, %conv2.conv.1.running_mean, %conv2.conv.1.running_var);
  %8 = %7.0;
  %9 = nn.leaky_relu(%8, alpha=0.125f);
  %10 = nn.conv2d(%9, %resblock_body1.conv1.conv.0.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %11 = nn.bias_add(%10, %resblock_body1.conv1.conv.0.bias);
  %12 = nn.batch_norm(%11, %resblock_body1.conv1.conv.1.weight, %resblock_body1.conv1.conv.1.bias, %resblock_body1.conv1.conv.1.running_mean, %resblock_body1.conv1.conv.1.running_var);
  %13 = %12.0;
  %14 = nn.leaky_relu(%13, alpha=0.125f);
  %15 = nn.conv2d(%14, %resblock_body1.conv2.conv.0.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %16 = nn.bias_add(%15, %resblock_body1.conv2.conv.0.bias);
  %17 = nn.batch_norm(%16, %resblock_body1.conv2.conv.1.weight, %resblock_body1.conv2.conv.1.bias, %resblock_body1.conv2.conv.1.running_mean, %resblock_body1.conv2.conv.1.running_var);
  %18 = %17.0;
  %19 = nn.leaky_relu(%18, alpha=0.125f);
  %20 = nn.conv2d(%19, %resblock_body1.conv3.conv.0.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %21 = nn.bias_add(%20, %resblock_body1.conv3.conv.0.bias);
  %22 = nn.batch_norm(%21, %resblock_body1.conv3.conv.1.weight, %resblock_body1.conv3.conv.1.bias, %resblock_body1.conv3.conv.1.running_mean, %resblock_body1.conv3.conv.1.running_var);
  %23 = %22.0;
  %24 = nn.leaky_relu(%23, alpha=0.125f);
  %25 = (%24, %19);
  %26 = concatenate(%25, axis=1);
  %27 = nn.conv2d(%26, %resblock_body1.conv4.conv.0.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %28 = nn.bias_add(%27, %resblock_body1.conv4.conv.0.bias);
  %29 = nn.batch_norm(%28, %resblock_body1.conv4.conv.1.weight, %resblock_body1.conv4.conv.1.bias, %resblock_body1.conv4.conv.1.running_mean, %resblock_body1.conv4.conv.1.running_var);
  %30 = %29.0;
  %31 = nn.leaky_relu(%30, alpha=0.125f);
  %32 = nn.max_pool2d(%31, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]);
  %33 = nn.conv2d(%32, %resblock_body2.conv1.conv.0.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %34 = nn.bias_add(%33, %resblock_body2.conv1.conv.0.bias);
  %35 = nn.batch_norm(%34, %resblock_body2.conv1.conv.1.weight, %resblock_body2.conv1.conv.1.bias, %resblock_body2.conv1.conv.1.running_mean, %resblock_body2.conv1.conv.1.running_var);
  %36 = %35.0;
  %37 = nn.leaky_relu(%36, alpha=0.125f);
  %38 = nn.conv2d(%37, %resblock_body2.conv2.conv.0.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %39 = nn.bias_add(%38, %resblock_body2.conv2.conv.0.bias);
  %40 = nn.batch_norm(%39, %resblock_body2.conv2.conv.1.weight, %resblock_body2.conv2.conv.1.bias, %resblock_body2.conv2.conv.1.running_mean, %resblock_body2.conv2.conv.1.running_var);
  %41 = %40.0;
  %42 = nn.leaky_relu(%41, alpha=0.125f);
  %43 = nn.conv2d(%42, %resblock_body2.conv3.conv.0.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %44 = nn.bias_add(%43, %resblock_body2.conv3.conv.0.bias);
  %45 = nn.batch_norm(%44, %resblock_body2.conv3.conv.1.weight, %resblock_body2.conv3.conv.1.bias, %resblock_body2.conv3.conv.1.running_mean, %resblock_body2.conv3.conv.1.running_var);
  %46 = %45.0;
  %47 = nn.leaky_relu(%46, alpha=0.125f);
  %48 = (%47, %42);
  %49 = concatenate(%48, axis=1);
  %50 = nn.conv2d(%49, %resblock_body2.conv4.conv.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %51 = nn.bias_add(%50, %resblock_body2.conv4.conv.0.bias);
  %52 = nn.batch_norm(%51, %resblock_body2.conv4.conv.1.weight, %resblock_body2.conv4.conv.1.bias, %resblock_body2.conv4.conv.1.running_mean, %resblock_body2.conv4.conv.1.running_var);
  %53 = %52.0;
  %54 = nn.leaky_relu(%53, alpha=0.125f);
  %55 = nn.max_pool2d(%54, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]);
  %56 = nn.conv2d(%55, %resblock_body3.conv1.conv.0.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %57 = nn.bias_add(%56, %resblock_body3.conv1.conv.0.bias);
  %58 = nn.batch_norm(%57, %resblock_body3.conv1.conv.1.weight, %resblock_body3.conv1.conv.1.bias, %resblock_body3.conv1.conv.1.running_mean, %resblock_body3.conv1.conv.1.running_var);
  %59 = %58.0;
  %60 = nn.leaky_relu(%59, alpha=0.125f);
  %61 = nn.conv2d(%60, %resblock_body3.conv2.conv.0.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %62 = nn.bias_add(%61, %resblock_body3.conv2.conv.0.bias);
  %63 = nn.batch_norm(%62, %resblock_body3.conv2.conv.1.weight, %resblock_body3.conv2.conv.1.bias, %resblock_body3.conv2.conv.1.running_mean, %resblock_body3.conv2.conv.1.running_var);
  %64 = %63.0;
  %65 = nn.leaky_relu(%64, alpha=0.125f);
  %66 = nn.conv2d(%65, %resblock_body3.conv3.conv.0.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %67 = nn.bias_add(%66, %resblock_body3.conv3.conv.0.bias);
  %68 = nn.batch_norm(%67, %resblock_body3.conv3.conv.1.weight, %resblock_body3.conv3.conv.1.bias, %resblock_body3.conv3.conv.1.running_mean, %resblock_body3.conv3.conv.1.running_var);
  %69 = %68.0;
  %70 = nn.leaky_relu(%69, alpha=0.125f);
  %71 = (%70, %65);
  %72 = concatenate(%71, axis=1);
  %73 = nn.conv2d(%72, %resblock_body3.conv4.conv.0.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %74 = nn.bias_add(%73, %resblock_body3.conv4.conv.0.bias);
  %75 = nn.batch_norm(%74, %resblock_body3.conv4.conv.1.weight, %resblock_body3.conv4.conv.1.bias, %resblock_body3.conv4.conv.1.running_mean, %resblock_body3.conv4.conv.1.running_var);
  %76 = %75.0;
  %77 = nn.leaky_relu(%76, alpha=0.125f);
  %78 = nn.max_pool2d(%77, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]);
  %79 = nn.conv2d(%70, %resblock_body3.conv5.conv.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %80 = nn.bias_add(%79, %resblock_body3.conv5.conv.0.bias);
  %81 = nn.batch_norm(%80, %resblock_body3.conv5.conv.1.weight, %resblock_body3.conv5.conv.1.bias, %resblock_body3.conv5.conv.1.running_mean, %resblock_body3.conv5.conv.1.running_var);
  %82 = %81.0;
  %83 = nn.leaky_relu(%82, alpha=0.125f);
  %84 = (%78, %83);
  %85 = %84.0;
  %86 = nn.conv2d(%85, %conv3.conv.0.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %87 = nn.bias_add(%86, %conv3.conv.0.bias);
  %88 = nn.batch_norm(%87, %conv3.conv.1.weight, %conv3.conv.1.bias, %conv3.conv.1.running_mean, %conv3.conv.1.running_var);
  %89 = %88.0;
  %90 = nn.leaky_relu(%89, alpha=0.125f);
  %91 = nn.conv2d(%90, %conv_for_P5.conv.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %92 = nn.bias_add(%91, %conv_for_P5.conv.0.bias);
  %93 = nn.batch_norm(%92, %conv_for_P5.conv.1.weight, %conv_for_P5.conv.1.bias, %conv_for_P5.conv.1.running_mean, %conv_for_P5.conv.1.running_var);
  %94 = %93.0;
  %95 = nn.leaky_relu(%94, alpha=0.125f);
  %96 = nn.conv2d(%95, %yolo_headP5.yolo_head.0.conv.0.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %97 = nn.bias_add(%96, %yolo_headP5.yolo_head.0.conv.0.bias);
  %98 = nn.batch_norm(%97, %yolo_headP5.yolo_head.0.conv.1.weight, %yolo_headP5.yolo_head.0.conv.1.bias, %yolo_headP5.yolo_head.0.conv.1.running_mean, %yolo_headP5.yolo_head.0.conv.1.running_var);
  %99 = %98.0;
  %100 = nn.leaky_relu(%99, alpha=0.125f);
  %101 = nn.conv2d(%100, %yolo_headP5.yolo_head.1.weight, padding=[0, 0, 0, 0], channels=18, kernel_size=[1, 1]);
  %102 = nn.bias_add(%101, %yolo_headP5.yolo_head.1.bias);
  %103 = nn.conv2d(%95, %upsample.upsample.0.conv.0.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %104 = nn.bias_add(%103, %upsample.upsample.0.conv.0.bias);
  %105 = nn.batch_norm(%104, %upsample.upsample.0.conv.1.weight, %upsample.upsample.0.conv.1.bias, %upsample.upsample.0.conv.1.running_mean, %upsample.upsample.0.conv.1.running_var);
  %106 = %105.0;
  %107 = nn.leaky_relu(%106, alpha=0.125f);
  %108 = image.resize(%107, size=[40, 40], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %109 = %84.1;
  %110 = (%108, %109);
  %111 = concatenate(%110, axis=1);
  %112 = nn.conv2d(%111, %yolo_headP4.yolo_head.0.conv.0.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %113 = nn.bias_add(%112, %yolo_headP4.yolo_head.0.conv.0.bias);
  %114 = nn.batch_norm(%113, %yolo_headP4.yolo_head.0.conv.1.weight, %yolo_headP4.yolo_head.0.conv.1.bias, %yolo_headP4.yolo_head.0.conv.1.running_mean, %yolo_headP4.yolo_head.0.conv.1.running_var);
  %115 = %114.0;
  %116 = nn.leaky_relu(%115, alpha=0.125f);
  %117 = nn.conv2d(%116, %yolo_headP4.yolo_head.1.weight, padding=[0, 0, 0, 0], channels=18, kernel_size=[1, 1]);
  %118 = nn.bias_add(%117, %yolo_headP4.yolo_head.1.bias);
  (%102, %118)
}